---
import { getCollection } from "astro:content";

// Recibir la categoría como prop
const { cat } = Astro.props;

// Obtener todos los posts de la colección
const general = await getCollection("accesorios");

// Filtrar los posts por la categoría recibida
const filtradoGeneral = general.filter((eq) => eq.data.tag === cat);
const slugsSplits = filtradoGeneral.map((f, i) => {
  const partes = f.slug.split("/");
  const primeraParte = partes[0];
  return `${primeraParte}/`;
});

const itemsToShow = 3; // Número de elementos visibles en el carrusel
const hasOverflow = filtradoGeneral.length > itemsToShow; // Verificar si hay más elementos que los visibles
---

<article class="related">
  <h2 class="related__title">Artículos Relacionados</h2>
  <article class="related__wrapper">
    {
      hasOverflow && (
        <img
          src="/icons/a-black.png"
          alt="Go Back Icon"
          class="related__button prev"
        />
      )
    }
    <section class="related__container">
      {
        filtradoGeneral.map((post, index) => (
          <div class="related__card">
            <a href={"/equipos/" + post.slug} class="link__image">
              <img
                class="related__img"
                src={post.data.image}
                alt={"Ir a " + post.data.titulo}
              />
            </a>
            <a href={"/equipos/" + post.slug} class="link__title">
              <h3>{post.data.titulo}</h3>
            </a>
            <a class="link__cat" href={"/equipos/" + slugsSplits[index]}>
              {post.data.tag}
            </a>
          </div>
        ))
      }
    </section>
    {
      hasOverflow && (
        <img
          src="/icons/a-black.png"
          alt="Go Next Button"
          class="related__button next"
        />
      )
    }
  </article>
</article>

<style>
  .related {
    width: 90%;
    max-width: 1300px;
    display: flex;
    flex-flow: column nowrap;
    margin-top: 40px;
    gap: 15px;
    padding: 15px 0;
    align-items: center;
    justify-content: center;
    border-top: 2px solid var(--black);
  }
  .related__container {
    display: flex;
    flex-flow: row nowrap;
    gap: 30px;
    overflow: hidden;
    scroll-behavior: smooth;
    width: 90%;
    position: relative;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  .related__container::-webkit-scrollbar {
    display: none;
  }

  .related__title {
    font-size: 30px;
  }
  .related__img {
    width: 270px;
    height: 270px;
    object-fit: contain;
    background-color: white;
  }
  .related__card {
    flex: 0 0 calc(100% / 3 - 10px); /* 3 elementos visibles */
    box-sizing: border-box;
    text-align: center;
    display: flex;
    flex-flow: column nowrap;
    justify-content: center;
    align-items: center;
    gap: 10px;
  }
  .related__wrapper {
    display: flex;
    flex-flow: row nowrap;
    width: 100%;
    max-width: 1400px;
    align-items: center;
    justify-content: center;
  }
  .related__button {
    width:60px;
    height: 60px;
    opacity: 0.9;
    cursor: pointer;
  }
  .prev {
    transform: rotate(180deg);
  }
  .link__image {
    width: 270px;
    height: 270px;
  }
  .link__title {
    width: max-content;
  }
  .link__cat {
    width: max-content;
  }
  @media (min-width: 800px) and (max-width: 1200px){
    .related {
    width: 100%;
  }
  .related__button {
    width: 50px;
    height: 40px;
  }
  .related__title {
    font-size: 28px;
    text-align: center;
  }
  .related__card {
    flex: 0 0 calc(100% / 3 - 20px); /* Redimensiona para 3 elementos visibles */
    width: calc(100% / 3 - 20px); /* Ajusta el ancho */
    max-width: calc(100% / 3 - 20px);
    box-sizing: border-box;
  }
  .related__img{
    width: 100%;
    height: auto;
  }
  .link__image{
    width: 100%;
    height: 200px;
  }

  .related__img {
    width: 100%; /* Ajustar la imagen al nuevo tamaño */
    height: 200px; /* Mantener la relación de aspecto */
  }
  }
  @media(max-width: 800px){
    .related {
    width: 100%;
  }
  .related__button {
    width: 40px;
    height: 40px;
  }
  .related__title {
    font-size: 25px;
    text-align: center;
  }
  .related__container {
    width: 100%;
  }

  .related__card {
    flex: 0 0 calc(100% / 2 - 15px); /* Ajustar para 2 elementos visibles */
    width: calc(100% / 2 - 15px); /* Asegurar que ocupen la mitad del ancho */
    max-width: calc(100% / 2 - 15px);
    box-sizing: border-box;
  }

  .related__img {
    width: 100%; /* La imagen ocupa todo el ancho de la tarjeta */
    height: 180px; /* Mantener la relación de aspecto */
  }
  .link__image{
    width: 100%;
    height: 180px;
  }
  }
</style>

<script>
   let itemsToShow = 3; // Número predeterminado de elementos visibles
  const container = document.querySelector(".related__container");
  const prevButton = document.querySelector(".related__button.prev");
  const nextButton = document.querySelector(".related__button.next");

  let currentScroll = 0;

  // Función para calcular el número de elementos visibles dinámicamente
  const calculateItemsToShow = () => {
    if (window.innerWidth <= 800) {
      return 2; // 2 elementos para pantallas menores a 800px
    }
    if (window.innerWidth <= 1200) {
      return 3; // 3 elementos para pantallas entre 800px y 1200px
    }
    return 3; // Por defecto, 3 elementos visibles
  };

  // Función para calcular el ancho de cada ítem
  const calculateItemWidth = () => {
    itemsToShow = calculateItemsToShow();
    return container.offsetWidth / itemsToShow;
  };

  // Función para manejar el desplazamiento
  const handleScroll = (direction) => {
    const itemWidth = calculateItemWidth();
    const maxScroll = container.scrollWidth - container.offsetWidth;

    // Desplazar de 3 elementos a la vez (o 2 dependiendo del tamaño de pantalla)
    const scrollAmount = itemWidth * itemsToShow;

    if (direction === "next") {
      currentScroll = Math.min(currentScroll + scrollAmount, maxScroll);
    } else if (direction === "prev") {
      currentScroll = Math.max(currentScroll - scrollAmount, 0);
    }

    container.scrollTo({
      left: currentScroll,
      behavior: "smooth",
    });
  };

  // Eventos de los botones
  prevButton?.addEventListener("click", () => handleScroll("prev"));
  nextButton?.addEventListener("click", () => handleScroll("next"));

  // Ajustar currentScroll y recalcular el desplazamiento al cambiar el tamaño de la ventana
  window.addEventListener("resize", () => {
    // Recalcular el ancho de los elementos y asegurarse de que currentScroll se mantenga dentro del rango válido
    const itemWidth = calculateItemWidth();
    const maxScroll = container.scrollWidth - container.offsetWidth;
    currentScroll = Math.min(currentScroll, maxScroll);
    container.scrollTo({ left: currentScroll });
  });

    // Soporte táctil
    let startX = 0;
    let scrollLeft = 0;

    container.addEventListener("touchstart", (e) => {
      startX = e.touches[0].pageX - container.offsetLeft;
      scrollLeft = container.scrollLeft;
    });

    container.addEventListener("touchmove", (e) => {
      const x = e.touches[0].pageX - container.offsetLeft;
      const walk = (startX - x) * 1.5;
      const maxScrollLeft = container.scrollWidth - container.offsetWidth;

      container.scrollLeft = Math.min(
        Math.max(scrollLeft + walk, 0),
        maxScrollLeft
      );
    });

</script>
